name: Scanner

on:
  issues:
    types:
      - opened

jobs:
  scan:
    name: Scan container Images
    if: ${{ !github.event.repository.is_template }}
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_URL: ${{ github.event.issue.html_url }}
      ISSUE_BODY: ${{ github.event.issue.body }}
    
    steps:
      - name: Init
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      # TASK/TODO: 
      # Build this step in the workflow. Refer to the linked document in the README for more details
      - name: TODO - Scan Vulnerabilities
        run: 
          echo "Build this step in the workflow. Refer to the linked document in the README for more details"
      - name: Run a script from Repo
        run: |
          format_output() {
            if [ $1 -eq 0 ]; then
                # echo "$(jq -n --arg in "$2" --arg st "SAFE" '{image: $in, status: $st}')"
                echo "SAFE"
            else
                # echo "$(jq -n --arg in "$2" --arg st "UNSAFE" '{image: $in, status: $st}')"
                echo "UNSAFE"
            fi
          }

          result=()
          mystring=${{ github.event.issue.body }}
          images=$(echo $mystring | cut -d "[" -f2 | cut -d "]" -f1)
          IFS="," read -a IMAGES <<< $images
          for i in ${IMAGES[@]}
          do
              echo $i
              value=$(trivy image --quiet --ignore-unfixed --severity HIGH,CRITICAL $i | grep -i "Total" | awk '{print $2}')
              values=$(format_output $value)
              result+=("$values")

          done
          myValue=$(jq -n --arg names "${IMAGES[*]}" --arg value "${result[*]}" '{"name": ($names / " "), "title": ($value / " ")}')
          myNewValue=$(echo $myValue | jq '[.name, .title] | transpose | map( {image: .[0],status: .[1]})')
          myNewNewValue=$(echo $myNewValue | sed "s/\"/'/g")
          myLatestValue=$(jq -n --arg names "$myNewNewValue" '{"body": ($names)}')
          echo $myLatestValue
          echo $myLatestValue > file.json
          echo "The values in file.json"
          cat file.json
          # curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/ibukunolatunde1/pipelineql-assessment/issues/${{ github.event.issue.id }}/comments -g -d @file.json